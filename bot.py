import os
import logging
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters

# OpenRouter key –∏ –±–∞–∑–æ–≤—ã–π URL
openai.api_key = os.getenv("OPENROUTER_API_KEY")
openai.base_url = "https://openrouter.ai/api/v1"

BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø GPT-–º–µ–Ω–µ–¥–∂–µ—Ä. –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É —Å –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏–µ–º.")

# –æ—Ç–≤–µ—Ç GPT
async def gpt_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_question = update.message.text
        response = openai.ChatCompletion.create(
            model="openai/gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü."},
                {"role": "user", "content": user_question}
            ]
        )
        await update.message.reply_text(response["choices"][0]["message"]["content"])
    except Exception as e:
        logging.error(f"OpenRouter GPT ERROR: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ OpenRouter. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_reply))
    app.run_polling()

if __name__ == "__main__":
    main()


