import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ConversationHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import openai
import os
from datetime import datetime
import traceback

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# Google Sheets
def init_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    return client.open_by_url("https://docs.google.com/spreadsheets/d/15-xtnsn6VDq0O4QHPCWnIMpTqc_7zNQCrk6M47e2u3M/edit").sheet1

sheet = init_sheet()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ASK_NAME, ASK_AGE, ASK_ARREST, ASK_OVERDUE, ASK_AMOUNT, CONFIRM = range(6)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["source"] = update.message.text.split(" ")[1] if len(update.message.text.split(" ")) > 1 else "direct"
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç.

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return ASK_AGE

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    buttons = [[InlineKeyboardButton("–î–∞", callback_data="–∞—Ä–µ—Å—Ç_–¥–∞"), InlineKeyboardButton("–ù–µ—Ç", callback_data="–∞—Ä–µ—Å—Ç_–Ω–µ—Ç")]]
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞—Ä–µ—Å—Ç—ã?", reply_markup=InlineKeyboardMarkup(buttons))
    return ASK_ARREST

async def ask_arrest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["arrest"] = "–î–∞" if update.callback_query.data == "–∞—Ä–µ—Å—Ç_–¥–∞" else "–ù–µ—Ç"
    await update.callback_query.answer()
    buttons = [[InlineKeyboardButton("–î–∞", callback_data="–ø—Ä–æ—Å—Ä–æ—á–∫–∞_–¥–∞"), InlineKeyboardButton("–ù–µ—Ç", callback_data="–ø—Ä–æ—Å—Ä–æ—á–∫–∞_–Ω–µ—Ç")]]
    await update.callback_query.edit_message_text("–ï—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏?", reply_markup=InlineKeyboardMarkup(buttons))
    return ASK_OVERDUE

async def ask_overdue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["overdue"] = "–î–∞" if update.callback_query.data == "–ø—Ä–æ—Å—Ä–æ—á–∫–∞_–¥–∞" else "–ù–µ—Ç"
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–ö–∞–∫—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ?")
    return ASK_AMOUNT

async def ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["amount"] = update.message.text
    return await show_summary(update, context)

async def show_summary(update_or_callback, context: ContextTypes.DEFAULT_TYPE):
    summary = f"üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞:

–§–ò–û: {context.user_data['name']}
–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}
–ê—Ä–µ—Å—Ç—ã: {context.user_data['arrest']}
–ü—Ä–æ—Å—Ä–æ—á–∫–∏: {context.user_data['overdue']}
–°—É–º–º–∞: {context.user_data['amount']}"
    buttons = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="edit")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/zhbankov_alex")],
        [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]
    ]
    if hasattr(update_or_callback, "message"):
        await update_or_callback.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await update_or_callback.callback_query.edit_message_text(summary, reply_markup=InlineKeyboardMarkup(buttons))
        await update_or_callback.callback_query.answer()
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    sheet.append_row([
        str(update.effective_user.id),
        update.effective_user.username,
        context.user_data.get("source", "unknown"),
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        context.user_data["name"],
        context.user_data["age"],
        context.user_data["arrest"],
        context.user_data["overdue"],
        context.user_data["amount"]
    ])
    await update.callback_query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    return ConversationHandler.END

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚úèÔ∏è –î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞–Ω–æ–≤–æ:")
    return ASK_NAME

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...
–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.")
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏, –≤–≤–µ–¥–∏—Ç–µ /start.
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, —è –ø–æ–º–æ–≥—É!")

async def gpt_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_question = update.message.text
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_question}]
        )
        await update.message.reply_text(response["choices"][0]["message"]["content"])
    except Exception as e:
        logging.error(traceback.format_exc())
        await update.message.reply_text("ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_ARREST: [CallbackQueryHandler(ask_arrest, pattern="^–∞—Ä–µ—Å—Ç_")],
            ASK_OVERDUE: [CallbackQueryHandler(ask_overdue, pattern="^–ø—Ä–æ—Å—Ä–æ—á–∫–∞_")],
            ASK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_amount)],
            CONFIRM: [
                CallbackQueryHandler(confirm, pattern="^confirm$"),
                CallbackQueryHandler(edit, pattern="^edit$"),
                CallbackQueryHandler(restart, pattern="^restart$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_reply))

    app.run_polling()

if __name__ == "__main__":
    main()

