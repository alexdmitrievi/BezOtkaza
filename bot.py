import os
import logging
from openai import OpenAI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler,
    MessageHandler, CallbackQueryHandler, ConversationHandler, filters
)
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def init_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client_gs = gspread.authorize(creds)
    return client_gs.open_by_url("https://docs.google.com/spreadsheets/d/15-xtnsn6VDq0O4QHPCWnIMpTqc_7zNQCrk6M47e2u3M/edit").sheet1

sheet = init_sheet()

ASK_NAME, ASK_AGE, ASK_ARREST, ASK_OVERDUE, ASK_AMOUNT, CONFIRM = range(6)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")]
        ], resize_keyboard=True, one_time_keyboard=True
    )
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=keyboard
    )

async def handle_reply_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return ASK_NAME
    elif text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?")
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return ConversationHandler.END

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return ASK_AGE

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    buttons = [[InlineKeyboardButton("–î–∞", callback_data="–∞—Ä–µ—Å—Ç_–¥–∞"), InlineKeyboardButton("–ù–µ—Ç", callback_data="–∞—Ä–µ—Å—Ç_–Ω–µ—Ç")]]
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞—Ä–µ—Å—Ç—ã?", reply_markup=InlineKeyboardMarkup(buttons))
    return ASK_ARREST

async def ask_arrest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["arrest"] = "–î–∞" if update.callback_query.data == "–∞—Ä–µ—Å—Ç_–¥–∞" else "–ù–µ—Ç"
    await update.callback_query.answer()
    buttons = [[InlineKeyboardButton("–î–∞", callback_data="–ø—Ä–æ—Å—Ä–æ—á–∫–∞_–¥–∞"), InlineKeyboardButton("–ù–µ—Ç", callback_data="–ø—Ä–æ—Å—Ä–æ—á–∫–∞_–Ω–µ—Ç")]]
    await update.callback_query.edit_message_text("–ï—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏?", reply_markup=InlineKeyboardMarkup(buttons))
    return ASK_OVERDUE

async def ask_overdue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["overdue"] = "–î–∞" if update.callback_query.data == "–ø—Ä–æ—Å—Ä–æ—á–∫–∞_–¥–∞" else "–ù–µ—Ç"
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–ö–∞–∫—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ?")
    return ASK_AMOUNT

async def ask_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["amount"] = update.message.text
    return await show_summary(update, context)

async def show_summary(update_or_callback, context: ContextTypes.DEFAULT_TYPE):
    summary = f"""üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n–§–ò–û: {context.user_data['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n–ê—Ä–µ—Å—Ç—ã: {context.user_data['arrest']}\n–ü—Ä–æ—Å—Ä–æ—á–∫–∏: {context.user_data['overdue']}\n–°—É–º–º–∞: {context.user_data['amount']}"""
    buttons = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="edit")],
        [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")]
    ]
    if hasattr(update_or_callback, "message"):
        await update_or_callback.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await update_or_callback.callback_query.edit_message_text(summary, reply_markup=InlineKeyboardMarkup(buttons))
        await update_or_callback.callback_query.answer()
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    sheet.append_row([
        str(update.effective_user.id),
        update.effective_user.username,
        context.user_data.get("source", "unknown"),
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        context.user_data["name"],
        context.user_data["age"],
        context.user_data["arrest"],
        context.user_data["overdue"],
        context.user_data["amount"]
    ])
    await update.callback_query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    return ConversationHandler.END

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚úèÔ∏è –î–∞–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞–Ω–æ–≤–æ:")
    return ASK_NAME

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...\n–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    else:
        await update.message.reply_text("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...\n–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.")
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ÑπÔ∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏, –≤–≤–µ–¥–∏—Ç–µ /start –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.")

async def gpt_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_question = update.message.text
        if user_question in ["üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]:
            return

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü."},
                {"role": "user", "content": user_question}
            ]
        )

        response_text = response.choices[0].message.content.strip()
        lowered = response_text.lower()

        redirect_phrases = ["–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–∞–Ω–∫", "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≤–∞—à –±–∞–Ω–∫", "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ", "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è"]
        if any(phrase in lowered for phrase in redirect_phrases):
            response_text += "\n\nüí° –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å ‚Äî –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª."

        await update.message.reply_text(response_text)

    except Exception as e:
        logging.error(f"GPT ERROR: {e}")
        await update.message.reply_text("‚ùå GPT API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), handle_reply_buttons)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_ARREST: [CallbackQueryHandler(ask_arrest, pattern="^–∞—Ä–µ—Å—Ç_")],
            ASK_OVERDUE: [CallbackQueryHandler(ask_overdue, pattern="^–ø—Ä–æ—Å—Ä–æ—á–∫–∞_")],
            ASK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_amount)],
            CONFIRM: [
                CallbackQueryHandler(confirm, pattern="^confirm$"),
                CallbackQueryHandler(edit, pattern="^edit$"),
                CallbackQueryHandler(restart, pattern="^restart$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.Regex("^üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º$"), handle_reply_buttons))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, gpt_reply))

    async def startup(application):
        await application.bot.set_my_commands([
            BotCommand("start", "–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"),
            BotCommand("help", "–ü–æ–º–æ—â—å –∏ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"),
            BotCommand("restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        ])

    app.post_init = startup
    app.run_polling()

if __name__ == "__main__":
    main()









